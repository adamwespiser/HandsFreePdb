#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<stdint.h>
#include"tracking.h"

extern handtrack_t tinfo;
extern log_info linfo;

#define BOXSIZE 100

void hand_determine_pos(float x, float y, float z, int hand, uint16_t * depth)
{
	int boxx, boxy;
	int hgram[4096];
	int i, j, idx;
	float hxprev, hyprev, hzprev;

//set boxx, boxy, h for each hand here!
// BUG CORRECTION: when tinfo.hand{1,2}_has_tracking evaluates to 1, box{x,y} are nto being 
// set. 
// NOTE: 1) for tracking based off previous hand position, set box{x,y} vars from tinfo.handfirst, for tracking based off input hand position, use input {x,y} variable
	if (hand == HAND_ONE) {

		if (!tinfo.hand1_has_tracking) {
			boxx = (int)x;
			boxy = (int)y;
			hzprev = z;
			hxprev = x;
			hyprev = y;
		} else {
			//boxx = (int)x;
			//boxy = (int)y;
			boxx = (int)tinfo.handfirst1_x;
			boxy = (int)tinfo.handfirst1_y;
			hxprev = tinfo.handfirst1_x;
			hyprev = tinfo.handfirst1_y;
			hzprev = tinfo.handfirst1_z;
		}
	}

	if (hand == HAND_TWO) {

		if (!tinfo.hand2_has_tracking) {
			boxx = (int)x;
			boxy = (int)y;
			hzprev = z;
			hxprev = x;
			hyprev = y;
		} else {
			//boxx = (int)x;
			//boxy = (int)y;
			boxx = (int)tinfo.handfirst2_x;
			boxy = (int)tinfo.handfirst2_y;
			hxprev = tinfo.handfirst2_x;
			hyprev = tinfo.handfirst2_y;
			hzprev = tinfo.handfirst2_z;
		}
	}
	//set hgram pts to 0
	for (i = 0; i < 4096; i++)
		hgram[i] = 0;

// depth histogram within the tracking box
// (AW) ??change box{x,y} to  (int)h{x,y}prev ???
	for (j = boxy - BOXSIZE / 2; j < boxy + BOXSIZE / 2; j++) {
		for (i = boxx - BOXSIZE / 2; i < boxx + BOXSIZE / 2; i++) {
			if (i < 0 || j < 0 || i > 639 || j > 479)
				continue;
			idx = i + 640 * j;
			hgram[(int)depth[idx]]++;
		}
	}

	int s = 0, cutoff;
	for (i = 0; i < 4096; i++)
		s += hgram[i];
	int scutoff = s * 0.3;
	s = 0;
	for (i = 0; i < 4096; i++) {
		s += hgram[i];
		if (s > scutoff) {
			cutoff = i;
			break;
		};
	}

	int hgramy[480];
	for (i = 0; i < 480; i++)
		hgramy[i] = 0;

	for (j = boxy - BOXSIZE / 2; j < boxy + BOXSIZE / 2; j++) {
		for (i = boxx - BOXSIZE / 2; i < boxx + BOXSIZE / 2; i++) {
			if (i < 0 || j < 0 || i > 639 || j > 479)
				continue;
			idx = i + 640 * j;
			if (depth[idx] < cutoff)
				hgramy[j]++;
		}
	}

	int sy = 0, cutoffy;
	for (i = 0; i < 480; i++)
		sy += hgramy[i];
	int sycutoff = sy * 0.2;
	sy = 0;
	for (i = 0; i < 480; i++) {
		sy += hgramy[i];
		if (sy > sycutoff) {
			cutoffy = i;
			break;
		}
	}

//////////////////
	float hx = 0, hy = 0, hz = 0;
	float hzz, hzzprev;
	int area = 0;

	float hxtop = 0, hytop = 0, hztop = 0;
	int areatop = 0;

	int itct = 0;
	for (j = boxy - BOXSIZE / 2; j < boxy + BOXSIZE / 2; j++) {
		for (i = boxx - BOXSIZE / 2; i < boxx + BOXSIZE / 2; i++) {
			itct++;
			if (i < 0 || j < 0 || i > 639 || j > 479)
				continue;
			idx = i + 640 * j;

			tinfo.tracking_mask[idx] = 0 + 40;

			if (depth[idx] < cutoff) {
				hx += i;
				hy += j;
				hz += depth[idx];
				area++;

				tinfo.tracking_mask[idx] = 20 + 40;

				if (j < cutoffy) {
					hxtop += i;
					hytop += j;
					hztop += depth[idx];
					areatop++;

					tinfo.tracking_mask[idx] = 39 + 40;

				}

			}
		}
	}

	if (TRK_TEST_AW) {
		printf("hand %d:\n\tboxx boxy cutoff   %d %d %d\n", hand, boxx,
		       boxy, cutoff);
		printf("\tinput(%.2f,%.2f,%.2f)\n", x, y, z);
		printf("\thxprev hyprev %.2f %.2f\n", hxprev, hyprev);
		printf("\tarea iteration_ct %d %d\n", area, itct);
		if (++tinfo.ct_check > 400 && hand == HAND_TWO) {
			printf(">>>> %d <<<<< tinfo.ct_check\n",
			       tinfo.ct_check);
			exit(1);
		}
	}
	if (area && areatop) {
		hx /= area;
		hy /= area;
		hz /= area;

		hxtop /= areatop;
		hytop /= areatop;
		hztop /= areatop;

		hzz = raw_depth_to_meters(hz);
		hzzprev = raw_depth_to_meters(hzprev);
		// maintain continuity of tracking
//    if ( fabs(hx-hxprev)<30 && fabs(hy-hyprev)<30 && fabs(hzz-hzzprev)< 0.50 ) 
		{

			// assign new coordinates
			set_handpos_xyz_from_cg(hxtop, hytop, hztop, hand);	//set tinfo.handpos{1,2}

			if (hand == HAND_ONE) {
				tinfo.handfirst1_x = (int)hx;
				tinfo.handfirst1_y = (int)hy;
				tinfo.handfirst1_z = (int)hz;
				tinfo.hand1_has_tracking = 1;
			} else {
				tinfo.handfirst2_x = (int)hx;
				tinfo.handfirst2_y = (int)hy;
				tinfo.handfirst2_z = (int)hz;
				tinfo.hand2_has_tracking = 1;
			}

		}
	} else {
		tinfo.trackingstatus = TRK_NO_TRACKING;
	}
	if (TRK_TEST_AW) {
		printf("\ttinfohandfirst1/2xyz: %d,%d,%d  ---  %d,%d,%d\n",
		       tinfo.handfirst1_x, tinfo.handfirst1_y,
		       tinfo.handfirst1_z, tinfo.handfirst2_x,
		       tinfo.handfirst2_y, tinfo.handfirst2_z);

	}
	return;
}

void set_buffer_to_current_hand_pos()
{
	vector3d zero_vector = init_zero_vector();
	vector3d hand_one = tinfo.hand1;
	vector3d hand_two = tinfo.hand2;
	int i;
	for (i = 0; i < BUFFER_SIZE; i++) {
		tinfo.hand1_smooth[i] = hand_one;
		tinfo.hand2_smooth[i] = hand_two;
		tinfo.hand1_velocity[i] = zero_vector;
		tinfo.hand2_velocity[i] = zero_vector;

	}			// end foreach buffer item 
}

int check_for_hand_conv()
{
	if (tinfo.handpos1_pix.x == tinfo.handpos2_pix.x &&
	    tinfo.handpos2_pix.y == tinfo.handpos1_pix.y) {
		return 1;
	}
	return 0;
}

void htrack_set_current_time_points(void)
{
	tinfo.hand1_cg[tinfo.bufptr] = tinfo.handpos1;

	tinfo.hand2_cg[tinfo.bufptr] = tinfo.handpos2;

//normalized output set for molview 
	tinfo.hand1 = init_zero_vector();

	tinfo.hand2 = init_zero_vector();

	int i, j;
	float count = 0, weight;

	for (i = 0; i < SMOOTHING_ITERATIONS; i++) {
		j = tinfo.bufptr - i + BUFFER_MAX_INDEX - 1;	//if (j<0) j=90-i;
		j = j % BUFFER_MAX_INDEX;
		weight = exp(-i / SMOOTHING_COEFF);

		tinfo.hand1.x += tinfo.hand1_cg[j].x * weight;
		tinfo.hand1.y += tinfo.hand1_cg[j].y * weight;
		tinfo.hand1.z += tinfo.hand1_cg[j].z * weight;

		tinfo.hand2.x += tinfo.hand2_cg[j].x * weight;
		tinfo.hand2.y += tinfo.hand2_cg[j].y * weight;
		tinfo.hand2.z += tinfo.hand2_cg[j].z * weight;

		count += weight;
//tinfo.bufptr++;

	}

	tinfo.hand1.x /= count;
	tinfo.hand1.y /= count;
	tinfo.hand1.z /= count;

	tinfo.hand2.x /= count;
	tinfo.hand2.y /= count;
	tinfo.hand2.z /= count;

	tinfo.hand1_smooth[tinfo.bufptr] = tinfo.hand1;
	tinfo.hand2_smooth[tinfo.bufptr] = tinfo.hand2;

	int last_ptr = (tinfo.bufptr - 1 + BUFFER_MAX_INDEX) % BUFFER_MAX_INDEX;

	tinfo.hand1_velocity[tinfo.bufptr] =
	    single_frame_velocity(tinfo.hand1_smooth[last_ptr], tinfo.hand1,
				  30);

	tinfo.hand2_velocity[tinfo.bufptr] =
	    single_frame_velocity(tinfo.hand2_smooth[last_ptr], tinfo.hand2,
				  30);

	tinfo.hand_distance[tinfo.bufptr] =
	    vector_magnitude(vector_subtract(tinfo.hand1, tinfo.hand2));

	tinfo.hand_center_pos[tinfo.bufptr] =
	    midpoint_vector(tinfo.hand1_smooth[tinfo.bufptr],
			    tinfo.hand2_smooth[tinfo.bufptr]);

	if (tinfo.hand_just_reset && RESET_BUFFER_ON_INIT) {
		tinfo.hand_center_velocity[tinfo.bufptr] = init_zero_vector();
	} else {

		tinfo.hand_center_velocity[tinfo.bufptr] =
		    single_frame_velocity(tinfo.hand_center_pos[last_ptr],
					  tinfo.hand_center_pos[tinfo.bufptr],
					  30);
	}

	tinfo.hand1_to_center_velocity[tinfo.bufptr] =
	    component_a_on_b(tinfo.hand1_velocity[tinfo.bufptr],
			     vector_from_coord_pair(tinfo.hand1_smooth
						    [tinfo.bufptr],
						    tinfo.hand_center_pos
						    [tinfo.bufptr]));
	tinfo.hand2_to_center_velocity[tinfo.bufptr] =
	    component_a_on_b(tinfo.hand2_velocity[tinfo.bufptr],
			     vector_from_coord_pair(tinfo.hand2_smooth
						    [tinfo.bufptr],
						    tinfo.hand_center_pos
						    [tinfo.bufptr]));

	tinfo.hand1_vel_mag[tinfo.bufptr] =
	    vector_magnitude(tinfo.hand1_velocity[tinfo.bufptr]);
	tinfo.hand2_vel_mag[tinfo.bufptr] =
	    vector_magnitude(tinfo.hand2_velocity[tinfo.bufptr]);

	report_xyz_for_two_hands();

	tinfo.bufptr++;

	if (tinfo.bufptr > (BUFFER_MAX_INDEX - 1))
		tinfo.bufptr = 0;
}

float raw_depth_to_meters(int depth_value)
{
	float depth_value_f = (float)depth_value;
	if (depth_value < 2047) {
		float depth =
		    1.0 / (depth_value_f * -0.0030711016 + 3.3309495161);
		return depth;
	}
	return 0.0f;
}

void set_handpos_xyz_from_cg(float cgx, float cgy, float cgz, int hand)
{
	double fx_d = 1.0 / 5.9421434211923247e+02;
	double fy_d = 1.0 / 5.9104053696870778e+02;
	double cx_d = 3.3930780975300314e+02;
	double cy_d = 2.4273913761751615e+02;

	float depth = raw_depth_to_meters(cgz);

	vector3d hand_pos = {
		(float)(cgx - cx_d) * depth * fx_d,
		(float)(cgy - cy_d) * depth * fy_d,
		(float)depth
	};

	vector3d handpos_pix = { cgx, cgy, cgz };

	if (hand == HAND_ONE) {
		tinfo.handpos1 = hand_pos;
	} else if (hand == HAND_TWO) {
		tinfo.handpos2 = hand_pos;
	}

	if (hand == HAND_ONE) {
		tinfo.handpos1_pix = handpos_pix;
	} else if (hand == HAND_TWO) {
		tinfo.handpos2_pix = handpos_pix;
	}

}

void report_xyz_for_two_hands()
{

	if (1 == 1) {
//h1x_velocity,h1y_velocity,h1z_velocity,h2x_velocity,h2y_velocity,h2z_velocity,center_x,center_y,center_z,center_x_velocity,center_y_velocity,center_z_velocity,h1x_position,h1y_position,h1z_position,h2x_position,h2y_position,h2z_position,hand1_to_center,hand2_to_center,time
		int index = (tinfo.bufptr);

		if (LOG_TRACKING_TO_FILE) {
			fprintf(linfo.fp,
				"%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%i\n",
				tinfo.hand1_velocity[index].x,
				tinfo.hand1_velocity[index].y,
				tinfo.hand1_velocity[index].z,
				tinfo.hand2_velocity[index].x,
				tinfo.hand2_velocity[index].y,
				tinfo.hand2_velocity[index].z,
				tinfo.hand_center_pos[index].x,
				tinfo.hand_center_pos[index].y,
				tinfo.hand_center_pos[index].z,
				tinfo.hand_center_velocity[index].x,
				tinfo.hand_center_velocity[index].y,
				tinfo.hand_center_velocity[index].z,
				tinfo.hand1_smooth[index].x,
				tinfo.hand1_smooth[index].y,
				tinfo.hand1_smooth[index].z,
				tinfo.hand2_smooth[index].x,
				tinfo.hand2_smooth[index].y,
				tinfo.hand2_smooth[index].z,
				tinfo.hand1_to_center_velocity[index],
				tinfo.hand2_to_center_velocity[index],
				tinfo.hand1_cg[index].x,
				tinfo.hand1_cg[index].y,
				tinfo.hand1_cg[index].z,
				tinfo.hand2_cg[index].x,
				tinfo.hand2_cg[index].y,
				tinfo.hand2_cg[index].z,
				tinfo.hand_distance[index], tinfo.time_point);
		}

		if (tinfo.hand1_has_tracking == 0
		    || tinfo.hand2_has_tracking == 0) {
			//      printf("[warning] lost hand tracking at time point: %i\n",tinfo.time_point);
		}
		tinfo.time_point++;
	}			//end if bufptr

}				// end of report for two hands xyz 

int tinfo_curr_bufptr()
{
	return tinfo.bufptr;
}

int bufptr_minus_one(int ptr)
{
	return ((ptr + BUFFER_MAX_INDEX - 1) % BUFFER_MAX_INDEX);
}

int tinfo_prev_bufptr()
{
	return bufptr_minus_one(tinfo.bufptr);
}

vector3d get_hand_rotation_crossproduct()
{
	int ptr = tinfo_prev_bufptr();
	vector3d v1 = tinfo.hand1_velocity[ptr];
	vector3d v2 = tinfo.hand2_velocity[ptr];
	vector3d r1 = tinfo.hand1_smooth[ptr];
	vector3d r2 = tinfo.hand2_smooth[ptr];

	v1.x = -v1.x;
	v1.y = -v1.y;
	v2.x = -v2.x;
	v2.y = -v2.y;
	r1.x = -r1.x;
	r1.y = -r1.y;
	r2.x = -r2.x;
	r2.y = -r2.y;
	return vector_crossproduct(vector_subtract(v1, v2),
				   vector_subtract(r1, r2));
	// to reverse rotation us the folowing instead of the previous 
	// return vector_crossproduct( vector_subtract(v2,v1), vector_subtract(r2,r1)); 
}
